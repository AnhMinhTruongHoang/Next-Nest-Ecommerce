"use client";

import React, { useEffect, useState } from "react";
import {
  Modal,
  Descriptions,
  Image,
  Carousel,
  UploadProps,
  GetProp,
  UploadFile,
  Upload,
  Divider,
} from "antd";
import { PlusOutlined } from "@ant-design/icons";
import { IProduct } from "next-auth";
import { v4 as uuidv4 } from "uuid";

interface ViewProductModalProps {
  isOpen: boolean;
  productData: IProduct | null;
  setViewProduct: (product: IProduct | null) => void;
  setIsViewModalOpen: (open: boolean) => void;
}

type FileType = Parameters<GetProp<UploadProps, "beforeUpload">>[0];

const ViewProductModal: React.FC<ViewProductModalProps> = ({
  isOpen,
  setViewProduct,
  setIsViewModalOpen,
  productData,
}) => {
  const safeText = (val: any) =>
    typeof val === "object" && val !== null ? val.name : val;

  // Convert file to base64 for preview
  const getBase64 = (file: FileType): Promise<string> =>
    new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = (error) => reject(error);
    });

  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewImage, setPreviewImage] = useState("");
  const [fileList, setFileList] = useState<UploadFile[]>([]);

  // Build thumbnail + slider images into UploadFile[]
  useEffect(() => {
    if (productData) {
      let imgThumbnail: UploadFile | null = null;
      let imgSlider: UploadFile[] = [];

      if (productData.thumbnail) {
        imgThumbnail = {
          uid: uuidv4(),
          name: productData.thumbnail,
          status: "done",
          url: `${process.env.NEXT_PUBLIC_BACKEND_URL}${productData.thumbnail}`,
        };
      }

      if (productData.slider?.length) {
        imgSlider = productData.slider.map((item) => ({
          uid: uuidv4(),
          name: item,
          status: "done",
          url: `${process.env.NEXT_PUBLIC_BACKEND_URL}${item}`,
        }));
      }

      setFileList(imgThumbnail ? [imgThumbnail, ...imgSlider] : imgSlider);
    }
  }, [productData]);

  const handlePreview = async (file: UploadFile) => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj as FileType);
    }

    setPreviewImage(file.url || (file.preview as string));
    setPreviewOpen(true);
  };

  const handleChange: UploadProps["onChange"] = ({ fileList: newFileList }) =>
    setFileList(newFileList);

  return (
    <Modal
      open={isOpen}
      onCancel={() => {
        setIsViewModalOpen(false);
        setViewProduct(null);
      }}
      footer={null}
      width={700}
      title={
        <div
          style={{ textAlign: "center", width: "100%", marginBottom: "15px" }}
        >
          Product Details
        </div>
      }
    >
      {productData && (
        <Descriptions bordered column={1} size="small">
          {productData.slider?.length > 0 && (
            <Descriptions.Item label="Slider Images">
              <Carousel autoplay>
                {productData.slider.map((img, idx) => (
                  <div key={idx} style={{ textAlign: "center" }}>
                    <Image
                      src={`${process.env.NEXT_PUBLIC_BACKEND_URL}/images/slider/${img}`}
                      alt={`slider-${idx}`}
                      width={200}
                    />
                  </div>
                ))}
              </Carousel>
            </Descriptions.Item>
          )}

          <Descriptions.Item label="Name">
            {safeText(productData.name)}
          </Descriptions.Item>
          <Descriptions.Item label="Brand">
            {safeText(productData.brand)}
          </Descriptions.Item>
          <Descriptions.Item label="Category">
            {safeText(productData.category)}
          </Descriptions.Item>
          <Descriptions.Item label="Price">
            {productData.price.toLocaleString("vi-VN")} â‚«
          </Descriptions.Item>
          <Descriptions.Item label="Stock">
            {productData.stock}
          </Descriptions.Item>
          <Descriptions.Item label="Sold">{productData.sold}</Descriptions.Item>
          <Descriptions.Item label="Created At">
            {new Date(productData.createdAt).toLocaleString()}
          </Descriptions.Item>
          <Descriptions.Item label="Updated At">
            {new Date(productData.updatedAt).toLocaleString()}
          </Descriptions.Item>
        </Descriptions>
      )}
      <Divider>Images</Divider>
      <Upload
        action="#"
        listType="picture-card"
        fileList={fileList}
        onPreview={handlePreview}
        onChange={handleChange}
        showUploadList={{ showRemoveIcon: false }}
      />
      {previewImage && (
        <Image
          wrapperStyle={{ display: "none" }}
          preview={{
            visible: previewOpen,
            onVisibleChange: (visible) => setPreviewOpen(visible),
            afterOpenChange: (visible) => !visible && setPreviewImage(""),
          }}
          src={previewImage}
        />
      )}
    </Modal>
  );
};

export default ViewProductModal;
