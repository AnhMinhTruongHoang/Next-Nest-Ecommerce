import { BadRequestException, Injectable } from '@nestjs/common';
import {
  CodeAuthDto,
  CreateUserDto,
  RegisterUserDto,
} from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { InjectModel } from '@nestjs/mongoose';
import { User as UserM, UserDocument } from './schemas/user.schema';
import mongoose, { Model } from 'mongoose';
import { genSaltSync, hashSync, compareSync } from 'bcryptjs';
import { SoftDeleteModel } from 'soft-delete-plugin-mongoose';
import aqp from 'api-query-params';
import { Users } from 'src/health/decorator/customize';
import { IUser } from 'src/types/user.interface';
import { v4 as uuidv4 } from 'uuid';
import { MailerService } from '@nestjs-modules/mailer';
import dayjs from 'dayjs';

@Injectable()
export class UsersService {
  constructor(
    @InjectModel(UserM.name)
    private userModel: SoftDeleteModel<UserDocument>,
    private mailerService: MailerService,
  ) {}

  getHashPassword = (password: string) => {
    const salt = genSaltSync(10);
    const hash = hashSync(password, salt);
    return hash;
  };

  /// create

  async create(createUserDto: CreateUserDto, @Users() user: IUser) {
    const {
      name,
      email,
      password,
      age,
      gender,
      address,
      role = 'USER',
      avatarUrl,
    } = createUserDto;

    //add logic check email
    const isExist = await this.userModel.findOne({ email });
    if (isExist) {
      throw new BadRequestException(`Email: ${email} already exist !.`);
    }

    const hashPassword = this.getHashPassword(password);

    let newUser = await this.userModel.create({
      name,
      email,
      password: hashPassword,
      age,
      gender,
      address,
      role: 'USER',
      avatarUrl,
      isActive: false,
      createdBy: {
        _id: user._id,
        email: user.email,
      },
    });

    ////

    return newUser;
  }

  //// register

  async register(user: RegisterUserDto) {
    const { name, email, password, age, gender, address } = user;
    //add logic check email
    const isExist = await this.userModel.findOne({ email });
    if (isExist) {
      throw new BadRequestException(`Email: ${email} is existed !.`);
    }

    //fetch user role
    const codeId = uuidv4();

    const hashPassword = this.getHashPassword(password);
    let newRegister = await this.userModel.create({
      name,
      email,
      password: hashPassword,
      age,
      gender,
      address,
      role: 'USER',
      isActive: false,
      codeId: codeId,
      codeExpired: dayjs().add(1, 'day'),
    });
    ////send mail
    this.mailerService.sendMail({
      to: email, // List of receivers
      subject: 'Activate your account', // Subject line
      template: 'register.hbs',
      context: {
        name: name ?? email,
        activationCode: codeId,
      },
    });

    return newRegister;
  }

  ///verify code
  async handleActive(data: CodeAuthDto) {
    const user = await this.userModel.findOne({
      _id: data._id,
      codeId: data.code,
    });

    if (!user) {
      throw new BadRequestException('Invalid Code');
    }
    //check date
    const isBeforeCheck = dayjs().isBefore(user.codeExpired);
    if (isBeforeCheck) {
      await this.userModel.updateOne(
        { _id: data._id },
        {
          isActive: true,
        },
      );
    } else {
      throw new BadRequestException('Invalid Code');
    }
    return { isBeforeCheck };
  }

  /// re-send gmail code

  async retryActive(email: string) {
    const user = await this.userModel.findOne({ email });

    if (!user) {
      throw new BadRequestException('Account is not exist !');
    }
    if (user.isActive) {
      throw new BadRequestException('Account is Activated !');
    } else {
      /// update user code
      const codeId = uuidv4();
      await user.updateOne({
        codeId: codeId,
        codeExpired: dayjs().add(1, 'days'),
      });
      ////re-send mail
      this.mailerService.sendMail({
        to: user?.email, // List of receivers
        subject: 'Activate your account', // Subject line
        template: 'register.hbs',
        context: {
          name: user?.name ?? user?.email,
          activationCode: codeId,
        },
      });
    }

    return { _id: user._id };
  }

  ///
  async findAll(currentPage: number, limit: number, qs: string) {
    const { filter, sort, population } = aqp(qs);
    delete filter.current;
    delete filter.pageSize;

    let offset = (+currentPage - 1) * +limit;
    let defaultLimit = +limit ? +limit : 10;

    const totalItems = (await this.userModel.find(filter)).length;
    const totalPages = Math.ceil(totalItems / defaultLimit);

    const result = await this.userModel
      .find(filter)
      .skip(offset)
      .limit(defaultLimit)
      .sort(sort as any)
      .select('-password')
      .populate(population)
      .exec();

    return {
      meta: {
        current: currentPage, //trang hiện tại
        pageSize: limit, //số lượng bản ghi đã lấy
        pages: totalPages, //tổng số trang với điều kiện query
        total: totalItems, // tổng số phần tử (số bản ghi)
      },
      result, //kết quả query
    };
  }

  async findOne(id: string) {
    if (!mongoose.Types.ObjectId.isValid(id)) return `not found user`;

    return await this.userModel
      .findOne({
        _id: id,
      })
      .select('-password')
      .populate({ path: 'role', select: { name: 1, _id: 1 } });

    //exclude >< include
  }

  findOneByUsername(username: string) {
    return this.userModel
      .findOne({
        email: username,
      })
      .populate({
        path: 'role',
        select: { name: 1 },
      });
  }

  async findByEmail(email: string) {
    if (!email) {
      throw new BadRequestException('Email is required');
    }

    return await this.userModel.findOne({ email }).populate({
      path: 'role',
      select: { name: 1, _id: 1 },
    });
  }

  isValidPassword(password: string, hash: string) {
    return compareSync(password, hash);
  }

  async update(updateUserDto: UpdateUserDto, user: IUser, _id: string) {
    if (!mongoose.Types.ObjectId.isValid(_id))
      throw new BadRequestException('not found user');

    const updated = await this.userModel.updateOne(
      { _id: _id },
      {
        ...updateUserDto,
        updatedBy: {
          _id: user._id,
          email: user.email,
        },
      },
    );
    return updated;
  }

  async remove(id: string, user: IUser) {
    if (!mongoose.Types.ObjectId.isValid(id)) return `not found user`;

    const foundUser = await this.userModel.findById(id);

    if (foundUser && foundUser.email === 'admin@gmail.com') {
      throw new BadRequestException('can not delete admin@gmail.com');
    }

    await this.userModel.updateOne(
      { _id: id },
      {
        deletedBy: {
          _id: user._id,
          email: user.email,
        },
      },
    );
    return this.userModel.softDelete({
      _id: id,
    });
  }

  updateUserToken = async (refreshToken: string, _id: string) => {
    return await this.userModel.updateOne({ _id }, { refreshToken });
  };

  findUserByToken = async (refreshToken: string) => {
    return await this.userModel.findOne({ refreshToken }).populate({
      path: 'role',
      select: { name: 1 },
    });
  };
}
